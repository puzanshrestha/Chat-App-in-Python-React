{"version":3,"sources":["App.js","Login.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chatMessages","message","username","socket","setUpConnection","data","array","push","setState","self","loc","window","location","wsStart","protocol","endpoint","host","pathname","WebSocket","onmessage","e","onMessageReceived","onopen","console","log","onclose","onerror","listItems","i","react_default","a","createElement","index_es","button","primary","_this2","react","position","variant","color","container","sm","style","Styles","leftPane","component","populateLeftPanel","direction","rightPane","display","flex","flexDirection","overflowY","padding","messages","map","key","borderRadius","marginBottom","id","placeholder","margin","onChange","event","target","value","alignItems","size","onClick","sendMessage","send","Component","marginTop","height","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAiBMA,cAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,aAAc,GACdC,QAAS,GACTC,SAAU,SAEdV,EAAKW,OAAS,IAAIV,OAClBD,EAAKY,kBATUZ,iFAaDa,GACd,IAAIC,EAAQX,KAAKI,MAAMC,aACvBM,EAAMC,KAAKF,GACXV,KAAKa,SAAS,CACVR,aAAcM,8CAKlB,IAAIG,EAAOd,KACPe,EAAMC,OAAOC,SACbC,EAAU,QACO,WAAjBH,EAAII,WACJD,EAAU,UAGd,IAAIE,EAAWF,EAAUH,EAAIM,KAAON,EAAIO,SAAW,MACnDtB,KAAKQ,OAAS,IAAIe,UAAUH,GAE5BpB,KAAKQ,OAAOgB,UAAY,SAAUC,GAG9BX,EAAKY,kBAAkBD,EAAEf,OAI7BV,KAAKQ,OAAOmB,OAAS,SAAUF,GAC3BG,QAAQC,IAAI,OAAQJ,IAIxBzB,KAAKQ,OAAOsB,QAAU,SAAUL,GAC5BG,QAAQC,IAAI,QAASJ,IAGzBzB,KAAKQ,OAAOuB,QAAU,SAAUN,GAC5BG,QAAQC,IAAI,QAASJ,IAGzBT,OAAOR,OAASR,KAAKQ,gGAarB,IADA,IAAIwB,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAUpB,KACNsB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,QAAM,GACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcE,QAAS,QAAUN,MAI7C,OAAOD,mCAGF,IAAAQ,EAAAxC,KAiBL,OACIkC,EAAAC,EAAAC,cAACK,EAAA,SAAD,KACIP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQK,SAAS,UACbR,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYM,QAAQ,KAAKC,MAAM,WAA/B,4BAORV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,WAAS,GACXX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,GAAI,GACNZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOU,MAAOC,EAAOC,UACjBf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMa,UAAU,MACXlD,KAAKmD,uBAMlBjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,GAAI,EAAGM,UAAW,UACpBlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOU,MAAOC,EAAOK,WACjBnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMU,MAAO,CAACO,QAAS,OAAQC,KAAM,EAAGC,cAAe,SAAUC,UAAW,OAAOC,QAAQ,KACvFxB,EAAAC,EAAAC,cAxCC,WACrB,IAAIuB,EAAW,GAWf,OATAnB,EAAKpC,MAAMC,aAAauD,IAAI,SAAAC,GAExBF,EAAS/C,KACLsB,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACe,aAAa,EAAEJ,QAAQ,IAChCxB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAaG,EAAKpC,MAAMG,SAAxB,KAAoCsD,EAApC,KACA3B,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACgB,aAAc,SAIhCJ,GA4Ba,OAGJzB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMU,MAAO,CAACO,QAAS,SACnBpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACI2B,GAAG,4BACHC,YAAY,yBACZC,OAAO,SACPvB,QAAQ,WACRwB,SAAU,SAAAC,GACN5B,EAAK3B,SAAS,CACVP,QAAS8D,EAAMC,OAAOC,SAI9BvB,MAAO,CAACQ,KAAM,KAGlBrB,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACO,QAAS,OAAQiB,WAAY,WAEtCrC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQM,QAAQ,YACR6B,KAAK,QACL5B,MAAM,UACN6B,QAAS,WACLjC,EAAKkC,gBAJjB,oDAqB5B1E,KAAKQ,OAAOmE,KAAK3E,KAAKI,MAAME,gBA/JlBsE,aAoKd5B,EAAS,CACLC,SAAU,CACN4B,UAAW,EACXnB,QAAS,GACToB,OAAQ,IACRrB,UAAW,QAIfJ,UAAW,CACPwB,UAAW,EACXnB,QAAS,GACToB,OAAQ,IACRxB,QAAS,OACTC,KAAM,EACNC,cAAe,WAMZ7D,ICvMKiF,YCSAG,QACW,cAA7B/D,OAAOC,SAAS+D,UAEe,UAA7BhE,OAAOC,SAAS+D,UAEhBhE,OAAOC,SAAS+D,SAASC,MACvB,2DCXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac9a38b9.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\n\nimport './App.css';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Grid,\n    TextField,\n    Button,\n    Paper,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatMessages: [],\n            message: '',\n            username: 'user1'\n        }\n        this.socket = new Object()\n        this.setUpConnection();\n\n    }\n\n    onMessageReceived(data) {\n        var array = this.state.chatMessages;\n        array.push(data);\n        this.setState({\n            chatMessages: array\n        })\n    }\n\n    setUpConnection() {\n        var self = this;\n        let loc = window.location\n        let wsStart = 'ws://'\n        if (loc.protocol === 'https:') {\n            wsStart = 'wss://'\n        }\n\n        let endpoint = wsStart + loc.host + loc.pathname + 'ws/'\n        this.socket = new WebSocket(endpoint);\n\n        this.socket.onmessage = function (e) {\n            // console.log(\"message\", e);\n\n            self.onMessageReceived(e.data)\n\n\n        }\n        this.socket.onopen = function (e) {\n            console.log(\"open\", e);\n\n        }\n\n        this.socket.onclose = function (e) {\n            console.log(\"close\", e);\n        }\n\n        this.socket.onerror = function (e) {\n            console.log(\"error\", e);\n        }\n\n        window.socket = this.socket;\n\n    }\n\n\n    componentDidMount() {\n\n\n    }\n\n\n    populateLeftPanel() {\n        var listItems = [];\n        for (var i = 0; i < 20; i++) {\n            listItems.push(\n                <ListItem button>\n                    <ListItemText primary={\"Trash\" + i}/>\n                </ListItem>\n            )\n        }\n        return listItems\n    }\n\n    render() {\n        const PopulateMessages = () => {\n            var messages = []\n\n            this.state.chatMessages.map(key => {\n                // for (var i = 0; i < 200; i++)\n                messages.push(\n                    <div style={{borderRadius:5,padding:5}}>\n                        <Typography>{this.state.username}: {key} </Typography>\n                        <div style={{marginBottom: 5}}></div>\n                    </div>);\n            })\n\n            return messages;\n\n        }\n\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Django Channel Example\n                        </Typography>\n\n                    </Toolbar>\n                </AppBar>\n\n                <Grid container>\n                    <Grid sm={3}>\n                        <Paper style={Styles.leftPane}>\n                            <List component=\"ul\">\n                                {this.populateLeftPanel()}\n\n                            </List>\n                        </Paper>\n                    </Grid>\n\n                    <Grid sm={9} direction={\"column\"}>\n                        <Paper style={Styles.rightPane}>\n                            <Grid style={{display: 'flex', flex: 1, flexDirection: 'column', overflowY: 'auto',padding:10}}>\n                                <PopulateMessages/>\n                            </Grid>\n\n                            <Grid style={{display: 'flex'}}>\n                                <TextField\n                                    id=\"outlined-with-placeholder\"\n                                    placeholder=\"Type your message here\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    onChange={event => {\n                                        this.setState({\n                                            message: event.target.value\n                                        })\n                                    }\n                                    }\n                                    style={{flex: 1}}\n\n                                />\n                                <div style={{display: 'flex', alignItems: 'center'}}>\n\n                                    <Button variant=\"contained\"\n                                            size=\"large\"\n                                            color=\"primary\"\n                                            onClick={() => {\n                                                this.sendMessage()\n                                            }}\n                                    >\n                                        Send\n                                    </Button>\n                                </div>\n\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n\n            </Fragment>\n        )\n    }\n\n    sendMessage() {\n        this.socket.send(this.state.message)\n    }\n}\n\nconst\n    Styles = {\n        leftPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            overflowY: 'auto',\n\n\n        },\n        rightPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column'\n\n        },\n\n    };\n\nexport default App;","import React, {Component, Fragment} from \"react\";\nimport {Grid, Paper, TextField, Typography, Button} from \"@material-ui/core\"\n\nclass Login extends Component {\n\n\n    render() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{minHeight: '100vh'}}\n                flex={1}\n\n            >\n\n                <Paper style={{padding: 50}}>\n                    <Typography variant={\"h6\"}>Please login</Typography>\n                    <Grid container direction=\"column\">\n                        <Grid>\n                            <TextField\n                                id=\"outlined-username-input\"\n                                label=\"Username\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n\n                        <Grid>\n                            <TextField\n                                id=\"outlined-password-input\"\n                                label=\"Password\"\n                                type=\"password\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid direction=\"row\" style={{\n                        justifyContent: 'flex-end',\n                        alignItems: 'flex-end',\n                        alignContent: 'flex-end',\n                        flex: 1\n                    }}><div style={{ flex: 1 }}/>\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\n                                style={{marginTop: 20, alignSelf: 'flex-end'}}>\n                            Login\n                        </Button>\n                    </Grid>\n                </Paper>\n\n            </Grid>\n\n\n        )\n\n    }\n\n};\nexport default Login;\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}