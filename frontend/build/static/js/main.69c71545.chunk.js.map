{"version":3,"sources":["App.js","Login.js","serviceWorker.js","index.js"],"names":["App","loc","window","location","wsStart","protocol","endpoint","host","pathname","socket","WebSocket","onmessage","e","console","log","data","onopen","onclose","onerror","listItems","i","push","react_default","a","createElement","index_es","button","primary","react","position","variant","color","container","sm","style","Styles","Paper","component","this","populateLeftPanel","Component","marginTop","padding","height","overflowY","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAMMA,8LAEE,IAAIC,EAAMC,OAAOC,SACbC,EAAU,QAGO,WAAjBH,EAAII,WACJD,EAAU,UAId,IAAIE,EAAWF,EAAUH,EAAIM,KAAON,EAAIO,SAAW,MAE/CC,EAAS,IAAIC,UAAUJ,GAE3BG,EAAOE,UAAY,SAAUC,GACzBC,QAAQC,IAAI,UAAWF,GACvBC,QAAQC,IAAIF,EAAEG,OAElBN,EAAOO,OAAS,SAAUJ,GACtBC,QAAQC,IAAI,OAAQF,IAGxBH,EAAOQ,QAAU,SAAUL,GACvBC,QAAQC,IAAI,QAASF,IAGzBH,EAAOS,QAAU,SAAUN,GACvBC,QAAQC,IAAI,QAASF,IAGzBV,OAAOO,OAASA,8CAMhB,IADA,IAAIU,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAUE,KACNC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,QAAM,GACZJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAcE,QAAS,QAAQP,MAI3C,OAAOD,mCAIP,OACIG,EAAAC,EAAAC,cAACI,EAAA,SAAD,KACIN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQI,SAAS,UACbP,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYK,QAAQ,KAAKC,MAAM,WAA/B,+BAORT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,WAAS,GACXV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,GAAI,GACNX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,MAAOC,EAAOC,OACjBd,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMY,UAAU,MACXC,KAAKC,uBAMlBjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMQ,GAAI,GACNX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,MAAOC,EAAOC,OAArB,mBAtENI,aAiFZL,EAAS,CACXC,MAAO,CACHK,UAAW,EACXC,QAAS,GACTC,OAAQ,IACRC,UAAW,SAMJ5C,IC/FKwC,YCSAK,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.69c71545.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\n\nimport './App.css';\nimport {AppBar, Toolbar, Typography, Grid, Paper, List, ListItem, ListItemText} from '@material-ui/core';\n\n\nclass App extends Component {\n    componentDidMount() {\n        var loc = window.location\n        var wsStart = 'ws://'\n\n\n        if (loc.protocol === 'https:') {\n            wsStart = 'wss://'\n        }\n\n\n        var endpoint = wsStart + loc.host + loc.pathname + 'ws/'\n\n        var socket = new WebSocket(endpoint);\n\n        socket.onmessage = function (e) {\n            console.log(\"message\", e);\n            console.log(e.data)\n        }\n        socket.onopen = function (e) {\n            console.log(\"open\", e);\n        }\n\n        socket.onclose = function (e) {\n            console.log(\"close\", e);\n        }\n\n        socket.onerror = function (e) {\n            console.log(\"error\", e);\n        }\n\n        window.socket = socket;\n    }\n\n\n    populateLeftPanel() {\n        var listItems = [];\n        for (var i = 0; i < 20; i++) {\n            listItems.push(\n                <ListItem button>\n                    <ListItemText primary={\"Trash\"+i}/>\n                </ListItem>\n            )\n        }\n        return listItems\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Django Channel based Chat\n                        </Typography>\n\n                    </Toolbar>\n                </AppBar>\n\n                <Grid container>\n                    <Grid sm={3}>\n                        <Paper style={Styles.Paper}>\n                            <List component=\"ul\">\n                                {this.populateLeftPanel()}\n\n                            </List>\n                        </Paper>\n                    </Grid>\n\n                    <Grid sm={9}>\n                        <Paper style={Styles.Paper}>\n                            Right\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Fragment>\n        )\n    }\n\n}\n\nconst Styles = {\n    Paper: {\n        marginTop: 5,\n        padding: 10,\n        height: 500,\n        overflowY: 'auto'\n    },\n\n};\n\n\nexport default App;","import React, {Component, Fragment} from \"react\";\nimport {Grid, Paper, TextField, Typography, Button} from \"@material-ui/core\"\n\nclass Login extends Component {\n\n\n    render() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{minHeight: '100vh'}}\n                flex={1}\n\n            >\n\n                <Paper style={{padding: 50}}>\n                    <Typography variant={\"h6\"}>Please login</Typography>\n                    <Grid container direction=\"column\">\n                        <Grid>\n                            <TextField\n                                id=\"outlined-username-input\"\n                                label=\"Username\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n\n                        <Grid>\n                            <TextField\n                                id=\"outlined-password-input\"\n                                label=\"Password\"\n                                type=\"password\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid direction=\"row\" style={{\n                        justifyContent: 'flex-end',\n                        alignItems: 'flex-end',\n                        alignContent: 'flex-end',\n                        flex: 1\n                    }}><div style={{ flex: 1 }}/>\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\n                                style={{marginTop: 20, alignSelf: 'flex-end'}}>\n                            Login\n                        </Button>\n                    </Grid>\n                </Paper>\n\n            </Grid>\n\n\n        )\n\n    }\n\n};\nexport default Login;\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}