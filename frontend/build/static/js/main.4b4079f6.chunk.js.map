{"version":3,"sources":["Redux/Actions/LoginActionType.js","Redux/Reducers/LoginReducer.js","Redux/Reducers/RootReducer.js","Redux/Store.js","Redux/Constants.js","Redux/Actions/LoginAction.js","Login.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN","LOGOUT","loginAction","username","type","initialState","appReducer","combineReducers","login","state","arguments","length","undefined","action","Object","assign","rootReducer","store","createStore","applyMiddleware","thunk","logger","BASE_URL","password","body","axios","method","url","data","then","response","console","log","catch","error","handleLogin","dispatch","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","react_default","a","createElement","index_es","container","spacing","direction","alignItems","justify","style","minHeight","flex","padding","variant","id","label","autoComplete","margin","onChange","event","setState","target","value","justifyContent","alignContent","flexDirection","Link","to","size","color","marginTop","alignSelf","onClick","onLoginButtonPressed","Component","connect","Main","anchorProfileMenu","anchorChatUserMenu","chatMessages","message","userList","tabIndex","socket","setUpConnection","updateUserList","self","get","JSON","parse","actionType","populateMessage","Exception","array","push","sender","loc","window","location","wsStart","protocol","endpoint","host","pathname","WebSocket","onmessage","e","onMessageReceived","onopen","onclose","onerror","listItems","map","display","textTransform","primary","chatUserMenuOpenHandler","MoreVert_default","currentTarget","socketSend","stringify","history","send","_this3","renderProfileMenu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","open","Boolean","onClose","profileMenuHandleClose","onProfileClicked","onLogOutClicked","renderChatUserMenu","chatUserMenuCloseHandler","react","position","IconButton_default","aria-owns","aria-haspopup","profileMenuHandleOpen","AccountCircle_default","Styles","leftPane","component","populateLeftPanel","rightPane","defineProperty","overflowY","messages","key","selfSender","borderRadius","marginBottom","backgroundColor","placeholder","onKeyPress","ev","sendMessage","preventDefault","disableRipple","clientRequest","height","App","es","BrowserRouter","Switch","Route","path","exact","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b4079f6.chunk.js","sourcesContent":["export const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\nexport const loginAction = (username) => {\n    return {\n        type: LOGIN,\n        username: username\n    };\n};\n\nexport const logOutAction = () => {\n    return {\n        type: LOGOUT,\n    };\n};","import {\n    LOGIN,LOGOUT\n} from \"../Actions/LoginActionType\";\n\nconst initialState = {\n    username: ''\n};\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case LOGIN:\n            return Object.assign({}, state, {\n                username: action.username\n            });\n            break;\n\n        case LOGOUT:\n            return Object.assign({}, state, {\n                username: ''\n            });\n            break;\n\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport loginReducer from \"./LoginReducer\";\n\nconst appReducer = combineReducers({\n    login: loginReducer,\n\n});\n\nconst rootReducer = (state, action) => {\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import {createStore, applyMiddleware} from \"redux\";\n\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./Reducers/RootReducer\";\n\n\nlet store;\n\nstore = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","// export const BASE_URL = \"http://localhost:8000\"\nexport const BASE_URL = \"https://pujan-python.herokuapp.com\"","import {loginAction, logOutAction} from './LoginActionType'\nimport axios from 'axios';\nimport {BASE_URL} from '../Constants'\n\n\nexport function login(username, password) {\n    handleLogin(username, password);\n    return dispatch => {\n        dispatch(loginAction(username));\n    };\n}\n\nexport function logOut(username) {\n    handleLogOut(username);\n    return dispatch => {\n        dispatch(logOutAction(username));\n    };\n}\n\nfunction handleLogin(username, password) {\n    let body = {\n        username: username,\n        password: password\n    }\n\n    axios({\n        method: 'POST',\n        url: BASE_URL + '/login',\n        data: body\n    }).then(function (response) {\n        console.log(response)\n\n    }).catch(function (error) {\n        console.log(error);\n    }).then(function () {\n    });\n\n}\n\nfunction handleLogOut(username) {\n    let body = {\n        username: username\n    }\n    axios({\n        method: 'POST',\n        url: BASE_URL + '/logout',\n        data: body\n    }).then(function (response) {\n        console.log(response)\n\n    }).catch(function (error) {\n        console.log(error);\n    }).then(function () {\n    });\n\n}","import React, {Component, Fragment} from \"react\";\nimport {Grid, Paper, TextField, Typography, Button} from \"@material-ui/core\"\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {login} from \"./Redux/Actions/LoginAction\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: ''\n        }\n    }\n\n    render() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{minHeight: '100vh'}}\n                flex={1}\n\n            >\n\n                <Paper style={{padding: 50}}>\n                    <Typography variant={\"h6\"}>Please login</Typography>\n                    <Grid container direction=\"column\">\n                        <Grid>\n                            <TextField\n                                id=\"outlined-username-input\"\n                                label=\"Username\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={(event) => {\n                                    this.setState({\n                                        username: event.target.value\n                                    })\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid>\n                            <TextField\n                                id=\"outlined-password-input\"\n                                label=\"Password\"\n                                type=\"password\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={(event) => {\n                                    this.setState({\n                                        password: event.target.value\n                                    })\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid style={{\n                        justifyContent: 'flex-end',\n                        alignItems: 'flex-end',\n                        alignContent: 'flex-end',\n                        flex: 1,\n                        flexDirection: \"row\"\n                    }}>\n                        <div style={{flex: 1}}/>\n                        <Link to=\"/main\">\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\" color=\"primary\"\n                                style={{marginTop: 20, alignSelf: 'flex-end'}}\n                                onClick={() => this.onLoginButtonPressed()}\n                            >\n                                Login\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Paper>\n            </Grid>\n\n        )\n    }\n\n    onLoginButtonPressed() {\n        this.props.login(this.state.username, this.state.password)\n    }\n};\n\nconst mapStateToProps = state => {\n    return {}\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        login: (username, password) => dispatch(login(username, password)),\n\n    };\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login);\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, {Component, Fragment} from 'react';\n\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Grid,\n    TextField,\n    Button,\n    Paper,\n    List,\n    ListItem,\n    ListItemText,\n    Menu,\n    MenuItem, ListItemIcon,\n    Tabs, Tab\n} from '@material-ui/core';\nimport {connect} from \"react-redux\";\n\nimport axios from 'axios';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MoreVert from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton'\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            anchorProfileMenu: null,\n            anchorChatUserMenu: null,\n            chatMessages: [],\n            message: '',\n            username: this.props.username,\n            userList: [],\n            tabIndex: 0\n        }\n        this.socket = {}\n        this.setUpConnection();\n        this.updateUserList()\n\n    }\n\n    updateUserList() {\n        let self = this\n        axios.get('http://localhost:8000/get_user_list')\n            .then(function (response) {\n                // handle success (Try)\n                self.setState({\n                    userList: response.data.userList\n                })\n            })\n            .catch(function (error) {\n                // handle error (Catch)\n                console.log(error);\n            })\n            .then(function () {\n                // always executed (Finally)\n            });\n\n\n    }\n\n    onMessageReceived(data) {\n        try {\n            let action = (JSON.parse(data)).actionType;\n            console.log(action)\n            switch (action) {\n                case 'message':\n                    this.populateMessage(data);\n                    break\n\n                case 'updateUserList':\n                    this.updateUserList();\n\n                default:\n                    break;\n            }\n        }\n        catch (Exception) {\n\n        }\n\n    }\n\n    populateMessage(data) {\n        let array = this.state.chatMessages;\n        let response = JSON.parse(data)\n        array.push({'sender': response.sender, 'message': response.message});\n        this.setState({\n            chatMessages: array\n        })\n    }\n\n    setUpConnection() {\n        var self = this;\n        let loc = window.location\n        let wsStart = 'ws://'\n        if (loc.protocol === 'https:') {\n            wsStart = 'wss://'\n        }\n\n        let endpoint = wsStart + loc.host + loc.pathname + '/ws/'\n        this.socket = new WebSocket(endpoint);\n\n        this.socket.onmessage = function (e) {\n            // console.log(\"message\", e);\n\n            self.onMessageReceived(e.data)\n\n\n        }\n        this.socket.onopen = function (e) {\n            console.log(\"open\", e);\n\n        }\n\n        this.socket.onclose = function (e) {\n            console.log(\"close\", e);\n        }\n\n        this.socket.onerror = function (e) {\n            console.log(\"error\", e);\n        }\n\n        window.socket = this.socket;\n\n    }\n\n\n    componentDidMount() {\n\n\n    }\n\n\n    populateLeftPanel() {\n        var listItems = [];\n        this.state.userList.map((data) => {\n            listItems.push(\n                <ListItem style={{display: 'flex', flex: 1, flexDirection: 'vertical'}}>\n                    <Button style={{display: 'flex', flex: 1, justifyContent: 'flex-start', textTransform: 'none'}}>\n                        <ListItemText\n                            primary={data.username} style={{display: 'flex', flex: 1, justifyContent: 'flex-start'}}/>\n                    </Button>\n\n                    <Button\n                        onClick={(event) => {\n                            this.chatUserMenuOpenHandler(event)\n\n                        }}\n                        style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <ListItemIcon>\n                            <MoreVert/>\n                        </ListItemIcon>\n\n                    </Button>\n\n                </ListItem>\n            )\n        })\n        return listItems\n    }\n\n    profileMenuHandleClose() {\n        this.setState({\n            anchorProfileMenu: null\n        });\n\n    }\n\n    profileMenuHandleOpen(event) {\n        this.setState({\n            anchorProfileMenu: event.currentTarget\n        });\n    }\n\n    chatUserMenuOpenHandler(event) {\n        this.setState({\n            anchorChatUserMenu: event.currentTarget\n        })\n\n    }\n\n    chatUserMenuCloseHandler() {\n        this.setState({\n            anchorChatUserMenu: null\n        })\n    }\n\n    onProfileClicked() {\n        //TODO Redirect to User Profile\n    }\n\n    onLogOutClicked() {\n        let data = {\n            actionType: \"logout\",\n            username: this.state.username\n        }\n        this.socketSend(JSON.stringify(data))\n\n        this.props.history.push('/')\n    }\n\n    socketSend(data) {\n        this.socket.send(data)\n    }\n\n    render() {\n        const PopulateMessages = () => {\n            var messages = []\n            this.state.chatMessages.map(key => {\n                // for (var i = 0; i < 20; i++) {\n                var selfSender = this.state.username == key.sender\n                messages.push(\n                    <div style={{\n                        display: 'flex',\n                        borderRadius: 5,\n                        padding: 5,\n                        marginBottom: 4,\n                        justifyContent: selfSender ? 'flex-end' : 'flex-start'\n\n                    }}>\n                        <Paper style={{\n                            backgroundColor: selfSender ? '#E5E5EA' : '#52C2F9',\n                            padding: 10,\n                            borderRadius: 15\n                        }}>\n                            <Typography style={{\n                                color: selfSender ? 'black' : 'white',\n                            }}>{key.message}</Typography>\n                        </Paper>\n                        <div style={{marginBottom: 5}}></div>\n                    </div>\n                );\n\n            })\n\n            return messages;\n\n        }\n        const renderProfileMenu = (\n            <Menu\n                anchorEl={this.state.anchorProfileMenu}\n                anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n                transformOrigin={{vertical: 'top', horizontal: 'right'}}\n                open={Boolean(this.state.anchorProfileMenu)}\n                onClose={() => {\n                    this.profileMenuHandleClose()\n                }}\n            >\n                <MenuItem onClick={() => {\n                    this.onProfileClicked();\n                    this.profileMenuHandleClose()\n                }}>Profile</MenuItem>\n                <MenuItem onClick={() => {\n                    this.onLogOutClicked();\n                    this.profileMenuHandleClose()\n                }}>Log Out</MenuItem>\n            </Menu>\n        )\n\n        const renderChatUserMenu = (\n            <Menu\n                anchorEl={this.state.anchorChatUserMenu}\n                anchorOrigin={{vertical: 'top', horizontal: 'left'}}\n                transformOrigin={{vertical: 'top', horizontal: 'left'}}\n                open={Boolean(this.state.anchorChatUserMenu)}\n                onClose={() => {\n                    this.chatUserMenuCloseHandler()\n                }}\n            >\n                <MenuItem onClick={() => {\n                    this.onProfileClicked();\n                    this.profileMenuHandleClose()\n                }}>View Profile</MenuItem>\n                <MenuItem onClick={() => {\n                    this.onLogOutClicked();\n                    this.profileMenuHandleClose()\n                }}>Kick User</MenuItem>\n\n                <MenuItem onClick={() => {\n                    this.onLogOutClicked();\n                    this.profileMenuHandleClose()\n                }}>Send Message</MenuItem>\n            </Menu>\n        )\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar style={{display: 'flex'}}>\n                        <Typography variant=\"h6\" color=\"inherit\" style={{flex: 1}}>\n                            Django Channel Example\n                        </Typography>\n                        <IconButton\n                            aria-owns={'material-appbar'}\n                            aria-haspopup=\"true\"\n                            onClick={(event) => {\n                                this.profileMenuHandleOpen(event)\n\n                            }}\n                            color=\"inherit\"\n                        >\n                            <AccountCircle/>\n                        </IconButton>\n                    </Toolbar>\n                    {renderProfileMenu}\n                    {renderChatUserMenu}\n                </AppBar>\n\n                <Grid container style={{flex: 1, display: 'flex'}}>\n                    <Grid style={{display: 'flex', flex: 0.2}}>\n                        <Paper style={Styles.leftPane}>\n                            <List component=\"ul\" style={{flex: 1}}>\n                                {this.populateLeftPanel()}\n\n                            </List>\n                        </Paper>\n                    </Grid>\n\n                    <Grid style={{display: 'flex', flex: 0.7}}>\n                        <Paper style={Styles.rightPane}>\n                            <Grid style={{\n                                display: 'flex',\n                                flex: 1,\n                                flexDirection: 'column',\n                                overflowY: 'auto',\n                                padding: 10,\n                                flexDirection: 'column'\n                            }}>\n                                <PopulateMessages/>\n                            </Grid>\n\n                            <Grid style={{display: 'flex'}}>\n                                <TextField\n                                    id=\"outlined-with-placeholder\"\n                                    placeholder=\"Type your message here\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    onChange={event => {\n                                        this.setState({\n                                            message: event.target.value\n                                        })\n                                    }\n                                    }\n                                    value={this.state.message}\n                                    onKeyPress={(ev) => {\n                                        if (ev.key === 'Enter') {\n                                            this.sendMessage();\n                                            ev.preventDefault();\n                                        }\n                                    }}\n                                    style={{flex: 1}}\n\n                                />\n                                <div style={{display: 'flex', alignItems: 'center'}}>\n\n                                    <Button variant=\"contained\"\n                                            size=\"large\"\n                                            color=\"primary\"\n                                            onClick={() => {\n                                                this.sendMessage()\n                                            }}\n\n                                    >\n                                        Send\n                                    </Button>\n                                </div>\n\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Tabs\n                    value={this.state.tabIndex}\n\n                >\n                    <Tab\n                        disableRipple\n                        label=\"Tab 1\"\n                        onClick={() => {\n                            this.setState({tabIndex: 0})\n                        }}\n\n                    />\n                    <Tab\n                        disableRipple\n                        label=\"Tab 2\"\n                        onClick={() => {\n                            this.setState({tabIndex: 1})\n                        }}\n                    />\n                    <Tab\n                        disableRipple\n                        label=\"Tab 3\"\n                        onClick={() => {\n                            this.setState({tabIndex: 2})\n                        }}\n                    />\n                </Tabs>\n\n            </Fragment>\n        )\n    }\n\n    sendMessage() {\n        var clientRequest = {\n            actionType: \"message\",\n            sender: this.state.username,\n            message: this.state.message,\n\n        }\n        this.socket.send(JSON.stringify(clientRequest))\n        this.setState({\n            message: ''\n        })\n    }\n}\n\nconst\n    Styles = {\n        leftPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            display: 'flex',\n            flex: 1,\n            overflowY: 'auto',\n\n\n        },\n        rightPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column'\n\n        },\n\n    };\n\nconst mapStateToProps = state => {\n    return {\n        username: state.login.username\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);","import React, {Component} from 'react';\n\nimport {BrowserRouter, Route, Switch, Link} from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport store from './Redux/Store'\nimport Login from './Login'\nimport Main from './Main'\n\nexport default class App extends Component {\n\n    render() {\n        const Error = () => {\n            return <h1>Error Page</h1>\n        }\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path={\"/\"} exact component={Login}/>\n                        <Route path={\"/main\"} component={Main}/>\n                        <Route component={Error}/>\n                    </Switch>\n                </BrowserRouter>\n            </Provider>\n        )\n\n    }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}