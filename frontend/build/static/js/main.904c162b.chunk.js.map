{"version":3,"sources":["Redux/Actions/LoginAction.js","Redux/Reducers/LoginReducer.js","Redux/Reducers/RootReducer.js","Redux/Store.js","Login.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["loginTest","username","password","dispatch","loginBegin","LOGIN","type","initialState","appReducer","combineReducers","login","state","arguments","length","undefined","action","Object","assign","rootReducer","store","createStore","applyMiddleware","thunk","logger","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","react_default","a","createElement","index_es","container","spacing","direction","alignItems","justify","style","minHeight","flex","padding","variant","id","label","autoComplete","margin","onChange","event","setState","target","value","justifyContent","alignContent","flexDirection","Link","to","size","color","marginTop","alignSelf","onClick","onLoginButtonPressed","Component","connect","Main","chatMessages","message","socket","setUpConnection","data","array","response","JSON","parse","push","sender","self","loc","window","location","wsStart","protocol","endpoint","host","pathname","WebSocket","onmessage","e","onMessageReceived","onopen","console","log","onclose","onerror","listItems","i","button","primary","react","position","display","Styles","leftPane","component","populateLeftPanel","rightPane","defineProperty","overflowY","messages","map","key","selfSender","borderRadius","marginBottom","backgroundColor","placeholder","onKeyPress","ev","sendMessage","preventDefault","clientRequest","actionType","send","stringify","height","App","es","BrowserRouter","Switch","Route","path","exact","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.904c162b.chunk.js","sourcesContent":["export function loginTest(username, password) {\n\n    return dispatch => {\n        dispatch(loginBegin(username));\n    };\n}\n\nexport const LOGIN = \"LOGIN\";\n\nconst loginBegin = (username) => {\n    return {\n        type: LOGIN,\n        username: username\n    };\n};","import {\n    LOGIN,\n} from \"../Actions/LoginAction\";\n\nconst initialState = {\n    username: ''\n};\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case LOGIN:\n            return Object.assign({}, state, {\n                username: action.username\n            });\n            break;\n\n        default:\n            return state;\n    }\n}\n","import {combineReducers} from \"redux\";\nimport loginReducer from \"./LoginReducer\";\n\nconst appReducer = combineReducers({\n    login: loginReducer,\n\n});\n\nconst rootReducer = (state, action) => {\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import {createStore, applyMiddleware} from \"redux\";\n\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./Reducers/RootReducer\";\n\n\nlet store;\n\nstore = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","import React, {Component, Fragment} from \"react\";\nimport {Grid, Paper, TextField, Typography, Button} from \"@material-ui/core\"\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {loginTest} from \"./Redux/Actions/LoginAction\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: ''\n        }\n    }\n\n    render() {\n        return (\n            <Grid\n                container\n                spacing={0}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"center\"\n                style={{minHeight: '100vh'}}\n                flex={1}\n\n            >\n\n                <Paper style={{padding: 50}}>\n                    <Typography variant={\"h6\"}>Please login</Typography>\n                    <Grid container direction=\"column\">\n                        <Grid>\n                            <TextField\n                                id=\"outlined-username-input\"\n                                label=\"Username\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={(event) => {\n                                    this.setState({\n                                        username: event.target.value\n                                    })\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid>\n                            <TextField\n                                id=\"outlined-password-input\"\n                                label=\"Password\"\n                                type=\"password\"\n                                autoComplete=\"current-password\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={(event) => {\n                                    this.setState({\n                                        password: event.target.value\n                                    })\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Grid style={{\n                        justifyContent: 'flex-end',\n                        alignItems: 'flex-end',\n                        alignContent: 'flex-end',\n                        flex: 1,\n                        flexDirection: \"row\"\n                    }}>\n                        <div style={{flex: 1}}/>\n                        <Link to=\"/main\">\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\" color=\"primary\"\n                                style={{marginTop: 20, alignSelf: 'flex-end'}}\n                                onClick={() => this.onLoginButtonPressed()}\n                            >\n                                Login\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Paper>\n            </Grid>\n\n        )\n    }\n\n    onLoginButtonPressed() {\n        this.props.loginTest(this.state.username, this.state.password)\n    }\n};\n\nconst mapStateToProps = state => {\n    return {}\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginTest: (username, password) => dispatch(loginTest(username, password)),\n\n    };\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login);\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, {Component, Fragment} from 'react';\n\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    Grid,\n    TextField,\n    Button,\n    Paper,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\nimport {connect} from \"react-redux\";\nimport {loginTest} from \"./Redux/Actions/LoginAction\";\n\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatMessages: [],\n            message: '',\n            username: this.props.username\n        }\n        this.socket = {}\n        this.setUpConnection();\n\n    }\n\n    onMessageReceived(data) {\n        var array = this.state.chatMessages;\n        let response = JSON.parse(data)\n        array.push({'sender': response.sender, 'message': response.message});\n        this.setState({\n            chatMessages: array\n        })\n    }\n\n    setUpConnection() {\n        var self = this;\n        let loc = window.location\n        let wsStart = 'ws://'\n        if (loc.protocol === 'https:') {\n            wsStart = 'wss://'\n        }\n\n        let endpoint = wsStart + loc.host + loc.pathname + '/ws/'\n        this.socket = new WebSocket(endpoint);\n\n        this.socket.onmessage = function (e) {\n            // console.log(\"message\", e);\n\n            self.onMessageReceived(e.data)\n\n\n        }\n        this.socket.onopen = function (e) {\n            console.log(\"open\", e);\n\n        }\n\n        this.socket.onclose = function (e) {\n            console.log(\"close\", e);\n        }\n\n        this.socket.onerror = function (e) {\n            console.log(\"error\", e);\n        }\n\n        window.socket = this.socket;\n\n    }\n\n\n    componentDidMount() {\n\n\n    }\n\n\n    populateLeftPanel() {\n        var listItems = [];\n        for (var i = 0; i < 20; i++) {\n            listItems.push(\n                <ListItem button>\n                    <ListItemText primary={\"Trash\" + i}/>\n                </ListItem>\n            )\n        }\n        return listItems\n    }\n\n    render() {\n        const PopulateMessages = () => {\n            var messages = []\n\n\n            this.state.chatMessages.map(key => {\n                // for (var i = 0; i < 20; i++) {\n                var selfSender = this.state.username == key.sender\n                messages.push(\n                    <div style={{\n                        display: 'flex',\n                        borderRadius: 5,\n                        padding: 5,\n                        marginBottom: 4,\n                        justifyContent: selfSender ? 'flex-end' : 'flex-start'\n\n                    }}>\n                        <Paper style={{\n                            backgroundColor: selfSender ? '#E5E5EA' : '#52C2F9',\n                            padding: 10,\n                            borderRadius: 15\n                        }}>\n                            <Typography style={{\n                                color: selfSender ? 'black' : 'white',\n                            }}>{key.message}</Typography>\n                        </Paper>\n                        <div style={{marginBottom: 5}}></div>\n                    </div>\n                );\n\n            })\n\n            return messages;\n\n        }\n\n        return (\n            <Fragment>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Django Channel Example\n                        </Typography>\n\n                    </Toolbar>\n                </AppBar>\n\n                <Grid container style={{flex: 1, display: 'flex'}}>\n                    <Grid style={{display: 'flex', flex: 0.3}}>\n                        <Paper style={Styles.leftPane}>\n                            <List component=\"ul\">\n                                {this.populateLeftPanel()}\n\n                            </List>\n                        </Paper>\n                    </Grid>\n\n                    <Grid style={{display: 'flex', flex: 0.7}}>\n                        <Paper style={Styles.rightPane}>\n                            <Grid style={{\n                                display: 'flex',\n                                flex: 1,\n                                flexDirection: 'column',\n                                overflowY: 'auto',\n                                padding: 10,\n                                flexDirection: 'column'\n                            }}>\n                                <PopulateMessages/>\n                            </Grid>\n\n                            <Grid style={{display: 'flex'}}>\n                                <TextField\n                                    id=\"outlined-with-placeholder\"\n                                    placeholder=\"Type your message here\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    onChange={event => {\n                                        this.setState({\n                                            message: event.target.value\n                                        })\n                                    }\n                                    }\n                                    value={this.state.message}\n                                    onKeyPress={(ev) => {\n                                        if (ev.key === 'Enter') {\n                                            this.sendMessage();\n                                            ev.preventDefault();\n                                        }\n                                    }}\n                                    style={{flex: 1}}\n\n                                />\n                                <div style={{display: 'flex', alignItems: 'center'}}>\n\n                                    <Button variant=\"contained\"\n                                            size=\"large\"\n                                            color=\"primary\"\n                                            onClick={() => {\n                                                this.sendMessage()\n                                            }}\n\n                                    >\n                                        Send\n                                    </Button>\n                                </div>\n\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                </Grid>\n\n            </Fragment>\n        )\n    }\n\n    sendMessage() {\n        var clientRequest = {\n            actionType: \"message\",\n            sender: this.state.username,\n            message: this.state.message,\n\n        }\n        this.socket.send(JSON.stringify(clientRequest))\n        this.setState({\n            message: ''\n        })\n    }\n}\n\nconst\n    Styles = {\n        leftPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            display: 'flex',\n            flex: 1,\n            overflowY: 'auto',\n\n\n        },\n        rightPane: {\n            marginTop: 5,\n            padding: 10,\n            height: 500,\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column'\n\n        },\n\n    };\n\nconst mapStateToProps = state => {\n    return {\n        username: state.login.username\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        loginTest: (username, password) => dispatch(loginTest(username, password)),\n\n    };\n};\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Main);","import React, {Component} from 'react';\n\nimport {BrowserRouter, Route, Switch, Link} from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport store from './Redux/Store'\nimport Login from './Login'\nimport Main from './Main'\n\nexport default class App extends Component {\n\n    render() {\n        const Error = () => {\n            return <h1>Error Page</h1>\n        }\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route path={\"/\"} exact component={Login}/>\n                        <Route path={\"/main\"} component={Main}/>\n                        <Route component={Error}/>\n\n                    </Switch>\n                </BrowserRouter>\n            </Provider>\n        )\n\n    }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}